// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String   @map("password_hash")
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  phone        String?
  role         Role     @default(CUSTOMER)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  addresses      Address[]
  cart           Cart?
  orders         Order[]
  reviews        Review[]
  wishlist       Wishlist[]
  paymentMethods PaymentMethod[]
  preorders      Preorder[]

  @@map("users")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  parentId    Int?     @map("parent_id")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  parent   Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  children Category[] @relation("CategoryParent")
  products Product[]

  @@map("categories")
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  basePrice   Decimal       @db.Decimal(10, 2) @map("base_price") // Base price without color variations
  categoryId  Int?          @map("category_id")
  sku         String?       @unique
  images      String[]      // Main product images
  isActive    Boolean       @default(true) @map("is_active")
  stockStatus StockStatus   @default(IN_STOCK) @map("stock_status")
  
  // Preorder settings
  allowPreorder     Boolean   @default(false) @map("allow_preorder")
  preorderPrice     Decimal?  @db.Decimal(10, 2) @map("preorder_price") // Special preorder price
  expectedStockDate DateTime? @map("expected_stock_date") // When item expected back in stock
  preorderLimit     Int?      @map("preorder_limit") // Max preorders allowed
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  category      Category?       @relation(fields: [categoryId], references: [id])
  variants      ProductVariant[] // Color and size variants
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  wishlist      Wishlist[]
  preorders     Preorder[]

  @@map("products")
}

model Color {
  id       Int    @id @default(autoincrement())
  name     String @unique // e.g., "Red", "Blue", "Forest Green"
  hexCode  String @unique @map("hex_code") // e.g., "#FF0000", "#0000FF"
  isActive Boolean @default(true) @map("is_active")

  // Relations
  productVariants ProductVariant[]

  @@map("colors")
}

model Size {
  id       Int    @id @default(autoincrement())
  name     String @unique // e.g., "XS", "S", "M", "L", "XL", "One Size"
  sortOrder Int   @default(0) @map("sort_order") // For display ordering
  isActive Boolean @default(true) @map("is_active")

  // Relations
  productVariants ProductVariant[]

  @@map("sizes")
}

model ProductVariant {
  id           Int         @id @default(autoincrement())
  productId    Int         @map("product_id")
  colorId      Int?        @map("color_id") // Optional for products without color variants
  sizeId       Int?        @map("size_id")  // Optional for products without size variants
  sku          String?     @unique // Specific SKU for this variant
  price        Decimal?    @db.Decimal(10, 2) // Override price for this variant (optional)
  images       String[]    // Variant-specific images
  isActive     Boolean     @default(true) @map("is_active")
  stockStatus  StockStatus @default(IN_STOCK) @map("stock_status")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  color     Color?     @relation(fields: [colorId], references: [id])
  size      Size?      @relation(fields: [sizeId], references: [id])
  inventory Inventory?
  cartItems CartItem[]
  orderItems OrderItem[]
  preorders  Preorder[]

  @@unique([productId, colorId, sizeId])
  @@map("product_variants")
}

model Inventory {
  id                Int      @id @default(autoincrement())
  productVariantId  Int      @unique @map("product_variant_id")
  quantity          Int      @default(0)
  reservedQuantity  Int      @default(0) @map("reserved_quantity") // For pending orders/preorders
  lowStockThreshold Int      @default(10) @map("low_stock_threshold")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@map("inventory")
}

model Address {
  id            Int         @id @default(autoincrement())
  userId        Int         @map("user_id")
  type          AddressType @default(SHIPPING)
  firstName     String      @map("first_name")
  lastName      String      @map("last_name")
  streetAddress String      @map("street_address")
  city          String
  state         String
  postalCode    String      @map("postal_code")
  country       String
  isDefault     Boolean     @default(false) @map("is_default")
  createdAt     DateTime    @default(now()) @map("created_at")

  // Relations
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders Order[]   @relation("ShippingAddress")
  billingOrders  Order[]   @relation("BillingAddress")
  preorders      Preorder[]

  @@map("addresses")
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("cart")
}

model CartItem {
  id               Int      @id @default(autoincrement())
  cartId           Int      @map("cart_id")
  productId        Int      @map("product_id")
  productVariantId Int?     @map("product_variant_id") // For color/size variants
  quantity         Int
  price            Decimal  @db.Decimal(10, 2)
  isPreorder       Boolean  @default(false) @map("is_preorder") // Whether this is a preorder item
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  cart           Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product        Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model Order {
  id                    Int           @id @default(autoincrement())
  userId                Int           @map("user_id")
  orderNumber           String        @unique @map("order_number")
  status                OrderStatus   @default(PENDING)
  totalAmount           Decimal       @db.Decimal(10, 2) @map("total_amount")
  shippingAddressId     Int?          @map("shipping_address_id")
  billingAddressId      Int?          @map("billing_address_id")
  paymentStatus         PaymentStatus @default(PENDING) @map("payment_status")
  paymentMethod         String?       @map("payment_method")
  stripePaymentIntentId String?       @map("stripe_payment_intent_id")
  orderType             OrderType     @default(REGULAR) @map("order_type") // REGULAR or PREORDER
  expectedDeliveryDate  DateTime?     @map("expected_delivery_date") // For preorders
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")

  // Relations
  user            User        @relation(fields: [userId], references: [id])
  shippingAddress Address?    @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address?    @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items           OrderItem[]

  @@map("orders")
}

model OrderItem {
  id               Int      @id @default(autoincrement())
  orderId          Int      @map("order_id")
  productId        Int      @map("product_id")
  productVariantId Int?     @map("product_variant_id")
  quantity         Int
  price            Decimal  @db.Decimal(10, 2)
  total            Decimal  @db.Decimal(10, 2)
  isPreorder       Boolean  @default(false) @map("is_preorder")

  // Relations
  order          Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product        Product         @relation(fields: [productId], references: [id])
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id])

  @@map("order_items")
}

model Preorder {
  id               Int             @id @default(autoincrement())
  userId           Int             @map("user_id")
  productId        Int             @map("product_id")
  productVariantId Int?            @map("product_variant_id")
  quantity         Int
  price            Decimal         @db.Decimal(10, 2) // Price at time of preorder
  status           PreorderStatus  @default(PENDING)
  shippingAddressId Int?           @map("shipping_address_id")
  expectedDate     DateTime?       @map("expected_date") // When customer expects item
  depositPaid      Decimal?        @db.Decimal(10, 2) @map("deposit_paid") // Partial payment
  remainingAmount  Decimal?        @db.Decimal(10, 2) @map("remaining_amount")
  notifyWhenReady  Boolean         @default(true) @map("notify_when_ready")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")

  // Relations
  user            User            @relation(fields: [userId], references: [id])
  product         Product         @relation(fields: [productId], references: [id])
  productVariant  ProductVariant? @relation(fields: [productVariantId], references: [id])
  shippingAddress Address?        @relation(fields: [shippingAddressId], references: [id])

  @@map("preorders")
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  userId    Int      @map("user_id")
  rating    Int      @db.SmallInt
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  productId Int      @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist")
}

model PaymentMethod {
  id                    Int      @id @default(autoincrement())
  userId                Int      @map("user_id")
  stripePaymentMethodId String   @map("stripe_payment_method_id")
  cardLastFour          String   @map("card_last_four")
  cardBrand             String   @map("card_brand")
  isDefault             Boolean  @default(false) @map("is_default")
  createdAt             DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum AddressType {
  SHIPPING
  BILLING
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum OrderType {
  REGULAR
  PREORDER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIAL // For preorders with deposits
}

enum StockStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  DISCONTINUED
  PREORDER_ONLY
}

enum PreorderStatus {
  PENDING      // Waiting for stock
  CONFIRMED    // Preorder confirmed
  READY        // Item ready for shipment
  SHIPPED      // Item shipped
  DELIVERED    // Item delivered
  CANCELLED    // Preorder cancelled
  EXPIRED      // Preorder expired
}